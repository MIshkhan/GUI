package graph;

import javafx.event.EventHandler;
import javafx.scene.Cursor;
import javafx.scene.Group;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.scene.shape.Circle;
import javafx.scene.shape.Rectangle;
import javafx.scene.shape.RectangleBuilder;
import javafx.scene.text.Text;
import javafx.scene.control.Tooltip;

import javafx.application.Application;
import javafx.beans.value.*;
import javafx.event.*;
import javafx.geometry.Bounds;
import javafx.scene.*;
import javafx.scene.control.*;
import javafx.scene.image.*;
import javafx.scene.input.*;
import javafx.scene.layout.*;

import javafx.scene.shape.*;
import javafx.stage.Stage;

public class Grid {
  
  private Group root = new Group();

  private int startX = 10;
  private int startY = 10;
  private int rowNumber = 20;
  private int columnNumber = 20;
  private int cellHeight = 50;
  private int cellWidth = 50;
  
  final Rectangle rectangle = RectangleBuilder.create()
  .width(9000).height(8000)
    .fill(Color.SKYBLUE)
    .stroke(Color.BLACK)
    .build();

  public Grid() {
    //root.getChildren().add(rectangle);
    makeGrid();
  }

  public Group getRoot() {
    return this.root;
  }
  
  private void makeGrid() {
    //vertices on grid
    double radius = cellWidth / 5;
    for( int i = 0; i < rowNumber; ++i ) {
      double y = startY + i * cellHeight;
      for( int j = 0; j < columnNumber; ++j ) {
	double x = startX + j * cellWidth;
	Circle circle = new Circle(x, y, radius);	  
	circle.setFill(Color.WHITE);//setFill(Color.color(Math.random(), Math.random(), Math.random()));
	circle.setCursor(Cursor.HAND);
         
	setRemoveableVertexOnClick(circle, i , j);
	  
	root.getChildren().add(circle);
      }
    }
  }

  public Parent createZoomPane() {
    final double SCALE_DELTA = 1.1;
    final StackPane zoomPane = new StackPane();

    zoomPane.getChildren().add(root);
    zoomPane.setOnScroll(new EventHandler<ScrollEvent>() {
	@Override public void handle(ScrollEvent event) {
	  event.consume();

	  if (event.getDeltaY() == 0) {
	    return;
	  }

	  double scaleFactor =
	    (event.getDeltaY() > 0)
            ? SCALE_DELTA
            : 1/SCALE_DELTA;

	  root.setScaleX(root.getScaleX() * scaleFactor);
	  root.setScaleY(root.getScaleY() * scaleFactor);
	}
      });

    zoomPane.layoutBoundsProperty().addListener(new ChangeListener<Bounds>() {
	@Override public void changed(ObservableValue<? extends Bounds> observable, Bounds oldBounds, Bounds bounds) {
	  zoomPane.setClip(new Rectangle(bounds.getMinX(), bounds.getMinY(), bounds.getWidth(), bounds.getHeight()));
	}
      });

    return zoomPane;
  }

  
  private void setRemoveableVertexOnClick(Circle circle, int i, int j) {
    Circle vertex = new Circle(circle.getCenterX(),circle.getCenterY(), circle.getRadius());
    circle.setOnMousePressed(new EventHandler<MouseEvent>() {
	public void handle(MouseEvent me) {
	  //left click
	  if (me.isPrimaryButtonDown() && !root.getChildren().contains(vertex)) {	  
	    vertex.setFill(Color.BLACK);
	    vertex.setCursor(Cursor.HAND);
	    removeOnRightClick(vertex);
	    
	    Tooltip.install(vertex, new Tooltip("\nVertex (" + i + ":" + j + ")"));
	    
	    root.getChildren().add(vertex);
	  }
	}
      });
  }
 
  private void removeOnRightClick(Circle circle) {
    circle.setOnMousePressed(new EventHandler<MouseEvent>() {
	public void handle(MouseEvent me) {
	  if (me.isSecondaryButtonDown() && root.getChildren().contains(circle)) {
	    circle.toBack();
	    root.getChildren().remove(circle);
	  }
	}
      });
  }
}
